---
title: "Exploring data with Python"
subtitle: "2025-04-08"
code_fold: false
---

```{r}
#| label: setup
#| echo: false
library(reticulate)
use_virtualenv("myenv", required = TRUE)
virtualenv_install("myenv", "gapminder")
```

```{python}
#| label: setup-python
import pandas as pd
import numpy as np
```

# Prelude

---

{{< video https://www.youtube.com/watch?v=8IYSGJ77OVY height=70% width=100% >}}

@Ward2019-ez

# Overview

## Announcements

- Final project presentation [survey](https://forms.gle/oyotxgnnqchqnSgTA) [due]{.orange_due} today.

## Vonnegut on the shapes of stories

{{< video https://www.youtube.com/watch?v=oP3c1h8v2ZQ&t=83s width=100% height=70% >}}

@Comberg2010-mo

## Tentative presentation schedule

- [supplemental/presentation-schedule](../supplemental/presentation-schedule.qmd)

## Last time...

```{.python code-line-numbers="1|2-3|4-5|6-7|"}
import matplotlib.pyplot as plt           
rand_x = np.random.normal(0, 1, 100)
rand_y = np.random.normal(0, 1, 100)
data = {'x': rand_x, 'y': rand_y}
df = pd.DataFrame(data)
df.plot(x = 'x', y = 'y', kind = 'scatter')
plt.show()
```

```{python}
#| label: plot-random-xy-python
import matplotlib.pyplot as plt
rand_x = np.random.normal(0, 1, 100)
rand_y = np.random.normal(0, 1, 100)
data = {'x': rand_x, 'y': rand_y}
df = pd.DataFrame(data)
df.plot(x = 'x', y = 'y', kind = 'scatter')
plt.show()
```

## Today

- Exploring data with Python
- Work session
  - DataCamp
  - Final projects

# Exploring data with Python

## Remember Hans Rosling?

{{< video https://www.youtube.com/watch?v=jbkSRLYSojo&t=80s width=100% height=70% >}}

@RoslingUnknown-ys

---

![<https://gapminder.org>](../include/img/gapminder-dot-org.png)

## Dollar Street

![<https://www.gapminder.org/dollar-street>](../include/img/dollar-street.png)

## Gapminder data

- Full [dataset](https://www.gapminder.org/data/)
- Excerpt as R data package [@Bryan2017-zb] on [CRAN](https://cran.r-project.org/web/packages/gapminder/readme/README.html)
- Excerpt as Python package on [PyPi](https://pypi.org/project/gapminder/)

## Loading

```{.python}
from gapminder import gapminder
import matplotlib.pyplot as plt
```

```{python}
#| label: loading-gapminder
from gapminder import gapminder
import matplotlib.pyplot as plt
```

## Peeking

```{.python}
gapminder.head()    # <1>
```
1. Examine the first few rows of this `pandas` data frame.

```{python}
#| label: head-gapminder
gapminder.head()
```

---

::: {.callout-important}
Python has special functions that work with specific types of data elements like a `pandas` data frame.
These functions are called 'methods.'
So, `gapminder.head()` tells Python to apply the `head` method to the data frame.

I use R more than Python, so this syntax sometimes confuses me.
In fact, this won't work:

```{.python}
head(gapminder)
```

![](../include/img/head-gapminder-error-msg.png)
:::

## Data types

```{.python}
gapminder.dtypes
```

```{python}
#| label: dtypes-gapminder
gapminder.dtypes
```

## Describe

```{.python}
gapminder.describe
```

```{python}
#| label: gapminder-describe
gapminder.describe
```

## Exploring `country`

```{.python}
gapminder["country"]
```

```{python}
#| label: gapminder-country
gapminder["country"]
```

## Exploring `continent`

```{.python}
gapminder["continent"]
```

```{python}
#| label: gapminder-continent
gapminder["continent"]
```

## Exploring `year`

```{.python}
gapminder["year"]
```

```{python}
#| label: gapminder-year
gapminder["year"]
```

## Exploring `lifeExp`

```{.python}
gapminder["lifeExp"]
```

```{python}
#| label: gapminder-lifeExp
gapminder["lifeExp"]
```

## Exploring `pop`

```{.python}
gapminder["pop"]
```

```{python}
#| label: gapminder-pop
gapminder["pop"]
```

## Exploring `gdpPercap`

```{.python}
gapminder["gdpPercap"]
```

```{python}
#| label: gapminder-gdpPercap
gapminder["gdpPercap"]
```

## *Unique* values

```{.python}
gapminder["continent"].unique()
```

```{python}
#| label: gapminder-continent-unique
gapminder["continent"].unique()
```

- "chaining" methods one after the other like this using the dot (`.`) notation is analogous to using the pipe (`|>') command in R.

## Selecting rows

```{.python}
gapminder[gapminder["continent"].isin(["Asia"]) # <1>
```
1. The square brackets "[]" mean 'look inside' `gapminder`. Select the "continent" column, but only the rows that include "Asia".

```{python}
#| label: gapminder-continent-isin-asia
gapminder[gapminder["continent"].isin(["Asia"])]
```

## What do we want to know about?

::: {.incremental}
- life expectancy by country or continent
- life expectancy over time
- wealth by country or continent, over time
- life expectancy by wealth
:::

## Life expectancy by continent

::: {.incremental}
1. Choose year(s)
2. Select data
3. Plot
:::

## Life expectancy by continent - 1 & 2

```{.python}
gap2007 = gapminder[gapminder["year"]==2007]
```

- Pick rows from `gapminder` where "year" == 2007
- Assign it to a new variable called `gap2007`

```{python}
#| label: gapminder-year-2007
gap2007 = gapminder[gapminder["year"]==2007]
```

## Life expectancy by continent - 3

```{.python}
gap2007.boxplot("lifeExp", by="continent")
```

```{python}
#| label: gap2007-boxplot-lifexp-by-continent
gap2007.boxplot("lifeExp", by="continent")
plt.show()
```

## Life expectancy by continent - 3b

```{.python}
gap2007.hist("lifeExp", by="continent")
```

```{python}
#| label: gap2007-histogram-lifexp-by-continent
gap2007.hist("lifeExp", by="continent")
plt.show()
```

## Life expectancy over time

::: {.incremental}
1. Pick a country or continent
2. Select data
3. Create a plot
:::

## Life expectancy over time -- 1 & 2

```{.python}
gapAfrica = gapminder[gapminder["continent"]=="Africa"]
gapAfrica.head
```

```{python}
gapAfrica = gapminder[gapminder["continent"]=="Africa"]
gapAfrica.head
```

## Life expectancy over time -- 3

```{.python}
gapAfrica.plot(x = 'year', y = 'lifeExp', kind='scatter')
```

```{python}
gapAfrica.plot(x = 'year', y = 'lifeExp', kind='scatter')
```

## Life expectancy over time -- 3b

```{.python}
gapAfrica.boxplot("lifeExp", by="year")
```

```{python}
gapAfrica.boxplot("lifeExp", by="year")
```

## Wealth by continent

```{.python}
gap2007.boxplot("gdpPercap", by="continent")
```

```{python}
#| label: gap2007-boxplot-gdpPercap-by-continent
gap2007.boxplot("gdpPercap", by="continent")
plt.show()
```

## Wealth over time (Africa)

```{.python}
gapAfrica.plot(x = 'year', y = 'gdpPercap', kind='scatter')
```

```{python}
gapAfrica.plot(x = 'year', y = 'gdpPercap', kind='scatter')
```

## Life expectancy by wealth (Africa)

```{.python}
gapAfrica.plot(x = "gdpPercap", y = "lifeExp", kind = 'scatter')
```

```{python}
gapAfrica.plot(x = "gdpPercap", y = "lifeExp", kind = 'scatter')
```

## Exploring data

::: {.incremental}
0. Plot a simple figure
1. Figure sparks one or more questions
2. New figure or table answers the question(s) and sparks others
3. Rinse and repeat
:::

# Work session

# Resources

## References
