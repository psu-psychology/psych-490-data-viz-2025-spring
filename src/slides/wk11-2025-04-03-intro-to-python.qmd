---
title: "Introduction to Python"
subtitle: "2025-04-03"
code_fold: false
---

```{r}
#| label: setup
library(reticulate)
use_virtualenv("myenv", required = TRUE)
```

# Prelude

---

{{< video https://www.youtube.com/watch?v=qfu_PD-7EtM width=100% height=70% >}}

@EllaFitzgeraldVEVO2024-od

# Overview

## In the news

![Figure from @Witze2025-tl](https://media.nature.com/lw767/magazine-assets/d41586-025-00938-y/d41586-025-00938-y_50792452.png?as=webp)

---

![@Kozlov2025-aq](../include/img/nature-2025-04-01-nih-layoffs.png)

---

![@Mandavilli2025-kv](../include/img/nyt-2025-04-02-cdc-cuts.png)

---

![@Nunn2025-eh](../include/img/nyt-inside-cdc-1.png)

---

![@Nunn2025-eh](../include/img/nyt-inside-cdc-2.png)

---

![@Unknown2024-lt](../include/img/cdc-nchs-leading-causes-of-death.png)

---

### Multiple Cause of Death, 2018-2023, 20-24 years

| Cause | Deaths | Crude Rate |
|-------------------|-----|------|
|Accidents (unintentional injuries) | 56981  | 43.4 |
|Intentional self-harm (suicide) | 23238		| 17.7 |
|Assault (homicide) |	20098 |	131142222 | 15.3 |

---

| Cause | Deaths |  Crude Rate |
|-------------------|-----|------|
|Malignant neoplasms |	4627  | 3.5 |
|Diseases of heart	| 3520  |2.7 |
|COVID-19 |	1779  | 1.4 |
|Diabetes mellitus |	1259 |x`	1.0 |

---

| Cause | Deaths | Crude Rate |
|-------------------|-----|------|
|Congenital malformations, deformations and chromosomal abnormalities | 	1217  | 0.9 |
|Pregnancy, childbirth and the puerperium | 826		| 0.6 |
|Chronic lower respiratory diseases | 699		| 0.5 |
|Influenza and pneumonia |	634		| 0.5 |

---

| Cause | Deaths | Crude Rate |
|-------------------|-----|------|
|Cerebrovascular diseases | 619 | 0.5 |
|Legal intervention |	451		| 0.3 |
|Septicemia |	432		| 0.3 |
|Nephritis, nephrotic syndrome and nephrosis |	289		| 0.2 |

## Announcements

- [Exercise 06](../exercises/ex06-figs-w-r.qmd) [due]{.orange_due} today.
- Final project presentation [survey](https://forms.gle/oyotxgnnqchqnSgTA) [due]{.orange_due} Tuesday, April 8.

## Tentative presentation schedule

- [supplemental/presentation-schedule](../supplemental/presentation-schedule.qmd)

## Last time...

![NSFG repondent age by religion [figure](wk11-2025-04-01-more-ggplot.qmd#/new-twist-3-output)](../include/fig/fig-nsfg-22-23-ager-box-violin-raw-facet-lbl-1.png)

## Recommended design principles

- Work iteratively (in small steps)
- Keep prior versions
  - Store figure code in `*.R` or `*.qmd` files
- No 'secret sauce'
- The process *is* the product

## Today

- Introduction to Python
- Work session
  - DataCamp
  - Exercise 06
  - Final projects

# Introduction to Python

## Why learn Python?

::: {.incremental}
- It's fun
- It's free
- Amaze your friends; dazzle your rivals
- Powerful tool
- **It will make you a more productive researcher**
- Practical job-related skill
- More popular than R!
:::

## Why should psychologists learn Python?

::: {.incremental}
- Make experiments using [Psychopy](https://www.psychopy.org)
- Gather, clean, visualize your data using [matplotlib](https://matplotlib.org), [Seaborn](https://seaborn.pydata.org/examples/index.html), etc.
- Reproducible == robust, easy to share with others
:::

## Console

:::: {.columns}
::: {.column width=50%}
### R
```{.r}
license()
```

```{r}
license()
```
:::
::: {.column width=50%}
### Python
```{.python}
license
```

```{python}
license
```
:::
::::

## Reminder

::: {.callout-warning}
## Painful lesson #1

Computers are super-literal. They are anally literal. More anally literal than any human being you've *ever* had to deal with. 

You're not going to change them. Being this anal is their superpower.

Just deal.
:::

## Simple math

:::: {.columns}
::: {.column width=50%}
### R

```{.r code-line-numbers="1|2"}
x <- c(1, 4, 7)
sum(x)
```

```{r}
x <- c(1, 4, 7)
sum(x)
```
:::
::: {.column width=50%}

### Python
```{.python code-line-numbers="1|2"}
x = [1, 4, 7]
sum(x)
```

```{python}
x = [1, 4, 7]
sum(x)
```
:::
::::

## Getting help

:::: {.columns}
::: {.column width=50%}

### R
```{.r}
help("sort")
```

```{r}
help("sort")
```
:::
::: {.column width=50%}

### Python
```{.python}
help("numpy.sort")
```

```{python}
help("numpy.sort")
```
:::
::::

## Importing packages/libraries

:::: {.columns}
::: {.column width=50%}
### R
```{.r}
if (!require(ggplot2)) {            # <1>
  install.packages("ggplot2")       # <2>
} else {
  message("Already installed.")
}
library(ggplot2)                    # <3>
```
1. If the package isn't installed...
2. Install it (from the internet).
3. Load the package into memory

```{r}
if (!require(ggplot2)) {             # <1>
  install.packages("ggplot2")       # <2>
} else {
  message("Already installed.")
}
library(ggplot2)                    # <3>
```
:::
::: {.column width=50%}
### Python
```{.python}
<Install library outside of Python> # <1>
import numpy as np                  # <2>
```
1. Not shown here, sorry.
2. Load the `numpy` library into memory. We (optionally) give it a short name.

```{python}
import numpy as np
```
:::
::::

## `sort()` again

:::: {.columns}
::: {.column width=50%}
### R
```{.r}
x <- c(7, 1, 4, 12)
sort(x)
```

```{r}
x <- c(7, 1, 4, 12)
sort(x)
```
:::
::: {.column width=50%}
### Python
```{.python}
x = np.array([7, 1, 4, 12])     # <1>
np.sort(x)                      # <2>
```
1. Create a `numpy` array.
2. Call the `numpy` `sort` function/method on x.

```{python}
x = np.array([7, 1, 4, 12])
np.sort(x)  
```
:::
::::

---

:::: {.columns}
::: {.column width=50%}
### R

```{.r code-line-numbers="|4|6"}
your_age <- 21
your_shoe_size <- 8.5

your_age + your_shoe_size

your_shoe_size/your_age
```

```{r}
your_age <- 21
your_shoe_size <- 8.5

your_age + your_shoe_size

your_shoe_size/your_age
```
:::
::: {.column width=50%}
### Python

```{.python code-line-numbers="|4|6"}
your_age = 21
your_shoe_size = 8.5

your_age + your_shoe_size

your_shoe_size/your_age
```

```{r}
your_age = 21
your_shoe_size = 8.5

your_age + your_shoe_size

your_shoe_size/your_age
```
:::
::::

---

:::: {.columns}
::: {.column width=50%}
### R
::: {.callout-important}
## Don't use `=`, use `<-`

- You can substitute `=` but don't. Use `<-`.
- It's stylistic, but style matters.
- It's like saying 'like' all the time. Like people will like understand you, but they'll wonder why you like say like all the time when you really need not. 
- It's also a topic that could get you in a 'flame war'. 
- **Avoid flame wars** if you can. Life is too short.
:::
:::
::: {.column width=50%}
### Python
::: {.callout-important}
## Use `=`, not `<-`

- It's **essential**.
:::
:::
::::


## Asking questions

- comparison operators (`==`, `!=`, `>`, `<`, etc.).

:::: {.columns}
::: {.column width=50%}
### R

```{.r code-line-numbers="|1|2"}
1 == 0
sqrt(9) < 4
```

```{r}
1 == 0
sqrt(9) < 4
```
:::
::: {.column width=50%}
### Python
```{.python code-line-numbers="|1|2"}
1 == 0
np.sqrt(9) < 4        # <1>
```
1. Have to use `numpy` to get the square root (`sqrt`) function.

```{python}
1 == 0
np.sqrt(9) < 4
```
:::
::::

## What can we talk about?

## Strings

:::: {.columns}
::: {.column width=50%}
### R
```{.r}
c('w', 'x', 'y', 'z')

middle_letters <- c('m', 'n', 'o')
middle_letters
```

```{r}
c('w', 'x', 'y', 'z')

middle_letters <- c('m', 'n', 'o')
middle_letters
```
:::
::: {.column width=50%}
### Python
```{.python}
['w', 'x', 'y', 'z']

middle_letters = ['m', 'n', 'o']
middle_letters
```

```{python}
['w', 'x', 'y', 'z']

middle_letters = ['m', 'n', 'o']
middle_letters
```
:::
::::

## Strings $\neq$ numbers!

:::: {.columns}
::: {.column width=50%}
### R
```{.r}
identical(c('1', '2'), c(1, 2)) # <1>
```
1. *Safe* way in R to compare things.

```{r}
identical(c('1', '2'), c(1, 2))
```
:::
::: {.column width=50%}
### Python
```{.python}
['1', '2'] == [1, 2]
```

```{python}
['1', '2'] == [1, 2]
```
:::
::::

::: {.callout-note}
R uses `FALSE` where Python uses `False`.
:::

## Data frames

:::: {.columns}
::: {.column width=50%}
### R
```{.r}
df <- data.frame(name = c("Tom", "Jerry"), 
  age = c(10, 19))
str(df)
```

```{r}
df <- data.frame(name = c("Tom", "Jerry"), age = c(10, 19))
str(df)
```
:::
::: {.column width=50%}
### Python
```{.python}
import pandas as pd                                         # <1>
data = {'name': ["Tom", "Jerry"], 
  'age': [10, 19]}
df = pd.DataFrame(data)
print(df)
```
1. Load the `pandas` package to handle data frames.

```{python}
import pandas as pd                                         # <1>
data = {'name': ["Tom", "Jerry"], 'age': [10, 19]}
df = pd.DataFrame(data)
print(df)
```
:::
::::

## Plots in R

```{.r code-line-numbers="1-2|3|4-7"}
rand_x <- rnorm(100)
rand_y <- rnorm(100)
df <- data.frame(x = rand_x, y = rand_y)
df |>
  ggplot() +
  aes(x = x, y = y) +
  geom_point()
```

```{r}
#| label: plot-random-xy-r
rand_x <- rnorm(n = 100)
rand_y <- rnorm(n = 100)
df <- data.frame(x = rand_x, y = rand_y)
df |>
  ggplot() +
  aes(x = x, y = y) +
  geom_point()
```

## Plots in Python

```{.python code-line-numbers="1|2-3|4-5"}
import matplotlib.pyplot as plt           # <1>
rand_x = np.random.normal(0, 1, 100)
rand_y = np.random.normal(0, 1, 100)
data = {'x': rand_x, 'y': rand_y}
df = pd.DataFrame(data)
```
1. Import `pyplot` module from `matplotlib` with short name `plt`.

```{python}
#| label: plot-random-xy-python
import matplotlib.pyplot as plt
rand_x = np.random.normal(0, 1, 100)
rand_y = np.random.normal(0, 1, 100)
data = {'x': rand_x, 'y': rand_y}
df = pd.DataFrame(data)
df.plot(x = 'x', y = 'y', kind = 'scatter')
plt.show()
```

## Tip to the wise

:::: {.columns}
::: {.column width=50%}
### R
```{.r}
# Load packages into memory
library(ggplot2)
library(dplyr)
library(readr)
```
:::
::: {.column width=50%}
### Python
```{.python}
# Import libraries and modules
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
```
:::
::::

- Load/import packages/libraries once
- At the top of your script/document
- Need a new one? Add it to the code at the top of your script/document.

## Rules for naming things

1. Replace spaces (and hyphens/minus characters `-`) with underscores (`_`), and 
2. Start names with letters, not numbers.

- acceptable names for things: `bigly`, `good_name`, `a_longer_good_name`, `Good_name1`, and even `thisIsCamelCaseNoUnderscores` 
- unacceptable names: `!good`, `bad name` (has a space) or `1_very_bad_name` (starts with a number).

# Work session

# Next time

*Exploring data with Python*

# Resources

## References
