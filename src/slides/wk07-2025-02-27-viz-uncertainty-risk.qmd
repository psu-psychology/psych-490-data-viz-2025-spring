---
title: "Communicating uncertainty and risk"
subtitle: "2025-02-27"
---

# Overview

## In the news

![Figure 1 from @Dwyer-Lindgren2024-fb](../include/img/dwyer-lindgren-2024-fig-01.jpg)

## {.scrollable}

![Figure 4 from @Dwyer-Lindgren2024-fb](../include/img/dwyer-lindgren-2024-fig-04.jpg){.lightbox}

## Announcements

- [Pending]{.green_assigned}: [Final Project](../exercises/final-project.qmd) proposal
- [Pending]{.green_assigned}: [Exercise 04](../exercises/ex04-sci-of-data-viz.qmd)

---

![Available through March 2](../include/img/mseeq.png)

## Last time...

- Introduction to R

## Today

- Communicating uncertainty and risk
- Work session
  - R (DataCamp)
  - Exercise 04
  - Final project proposal
  
# Communicating uncertainty and risk

## Let's make some data

```{r}
#| echo: true
x0 <- rnorm(n = 100, mean = 0, sd = 1) # Normal distribution with mean 0 and standard deviation 1
x1 <- rnorm(n = 100, mean = 1, sd = 1) # Normal distribution with mean 1 and standard deviation 1
```

## Plot the data

```{r}
#| echo: true
#| label: fig-base-r-scatterplot
plot(x0, x1)
```

## Histograms

:::: {.columns}
::: {.column width=50%}
```{r}
#| echo: true
#| fig-cap: "Histogram of X0 with mean 0"
#| label: fig-base-r-histogram-x0
hist(x0)
```
:::
::: {.column width=50%}
```{r}
#| echo: true
#| fig-cap: "Histogram of X1 with mean 1"
#| label: fig-base-r-histogram-x1
hist(x1)
```
:::
::::

## Let's 'tidy'-up

- "Tidy" data $\rightarrow$ rectangular data; columns are variables; rows are observations.
- A data frame (`data.frame()`) is a useful way to store tidy data

```{r}
#| echo: true
two_sets <- data.frame(sample_name = c(rep("x0", 100), 
                                       rep("x1", 100)), 
                                       value = c(x0, x1))

dim(two_sets) # What is the dimension (size) of two_sets?
```

---

```{r}
#| echo: true
head(two_sets) # first several rows
tail(two_sets) # last several rows
```

---

::: {.callout-note}
`data.frame()`: makes a rectangular table of data with labeled columns.

`rep()`: replicates or repeats its arguments. So `rep('x0', 100)` makes a vector/array with 100 copies of 'x0'.

We use `value = c(x0, x1)` to combine x0 and x1 into one long set of values.

**Wait!**: You said don't use the equal sign (`=`), but use it here. What gives? Long-story shortened: The equal sign (`=`) only works when we're defining parameters inside a function; the left arrow (`<-`) does not. So, use left arrows for assigning names outside a function and equal signs inside functions.

Syntax is kind of a pain. Remember when you had to learn English grammar?
:::

## Another way to plot

```{r}
library(ggplot2)
#| label: fig-ggplot-side-by-side
two_sets |>
  ggplot() +
  aes(x = value) +
  geom_histogram() +
  facet_grid(cols = vars(sample_name))
```

## Boxplot + violin + raw

```{r}
#| echo: true
#| label: fig-violinp-box-scatter

two_sets |>
  ggplot() +
  aes(x = sample_name, y = value) +
  geom_violin() +
  geom_boxplot(alpha = .4) +
  geom_jitter(width = .2, height = 0)
```

## Points + error bars

```{r}
#| fig-cap: "Mean + 1 standard deviation"
#| label: fig-ggplot-mean-sd 
library(dplyr)
two_sets |>
  dplyr::group_by(sample_name) |>
  dplyr::mutate(mean_val = mean(value), sdev = sd(value)) |>
  dplyr::ungroup() |>
  ggplot() +
  aes(x = sample_name, y = mean_val) +
  geom_point() +
  geom_errorbar(aes(ymin=mean_val - sdev, ymax=mean_val + sdev, width = .1)) +
  ylim(-3, 3)
```
---

```{r}
#| fig-cap: "Mean + 1 standard error of the mean" 
#| label: fig-ggplot-mean-sem
two_sets |>
  dplyr::group_by(sample_name) |>
  dplyr::summarise(mean_val = mean(value), sdev = sd(value), n = n(), sem = sdev/sqrt(n)) |>
  ggplot() +
  aes(x = sample_name, y = mean_val) +
  geom_point() +
  geom_errorbar(aes(ymin=mean_val - sem, ymax=mean_val + sem, width = .1)) +
  ylim(-3, 3)
```

---

```{r}
#| fig-cap: "Mean + 1 standard deviation + jittered points"
#| label: fig-ggplot-mean-sd-pts
library(dplyr)
two_sets |>
  dplyr::group_by(sample_name) |>
  dplyr::mutate(mean_val = mean(value), sdev = sd(value)) |>
  dplyr::ungroup() |>
  ggplot() +
  aes(x = sample_name, y = mean_val) +
  geom_point() +
  geom_errorbar(aes(ymin=mean_val - sdev, ymax=mean_val + sdev, width = .1)) +
  geom_jitter(aes(y = value), width = .2, height = 0) +
  ylim(-3, 3)
```

---

```{r}
#| fig-cap: "Mean + 1 standard error of the mean + jittered points" 
#| label: fig-ggplot-mean-sem-pts
two_sets |>
  dplyr::group_by(sample_name) |>
  dplyr::mutate(mean_val = mean(value), sdev = sd(value), n = n(), sem = sdev/sqrt(n)) |>
  dplyr::ungroup() |>
  ggplot() +
  aes(x = sample_name, y = mean_val) +
  geom_point() +
  geom_errorbar(aes(ymin=mean_val - sem, ymax=mean_val + sem, width = .1)) +
  geom_jitter(aes(y = value), width = .2, height = 0) +
  ylim(-3, 3)
```

## Visualizing relationships between variables

- $y=F(x) + error$
- e.g., shoe_size = F(height)
- Make data that are related to one another
- Can we see the relationship?

---

```{r}
#| echo: true
x <- runif(n = 100, min = 0, max = 1) # Uniform distribution with min 0 and max 1
e <- rnorm(n = 100, mean = 0, sd = 1)
y1 <- x + 0.5*e
y2 <- x + 0.75*e
y3 <- x + e
y4 <- x + 1.5*e
y5 <- e

linear_df <- data.frame(x = x, y1 = y1, y2 = y2, y3 = y3, y4 = y4)
```

---

```{r}
#| fig-cap: "Linear fit with sd=.5"
linear_df |>
  ggplot() +
  aes(x = x, y = y1) +
  geom_point() +
  geom_smooth(method = "lm") +
  ggtitle("Correlation ", cor(x, y1))
```

---

```{r}
#| fig-cap: "Linear fit with sd=.75"
linear_df |>
  ggplot() +
  aes(x = x, y = y2) +
  geom_point() +
  geom_smooth(method = "lm") +
  ggtitle("Correlation ", cor(x, y2)) 
```

---

```{r}
#| fig-cap: "Linear fit with sd=1"
linear_df |>
  ggplot() +
  aes(x = x, y = y3) +
  geom_point() +
  geom_smooth(method = "lm") +
  ggtitle("Correlation ", cor(x, y3))
```

---

```{r}
#| fig-cap: "Linear fit with sd=1.5"
linear_df |>
  ggplot() +
  aes(x = x, y = y4) +
  geom_point() +
  geom_smooth(method = "lm") +
  ggtitle("Correlation ", cor(x, y4))
```

---

```{r}
#| fig-cap: "Linear fit with *independent* unrelated variables"
linear_df |>
  ggplot() +
  aes(x = x, y = y5) +
  geom_point() +
  geom_smooth(method = "lm") +
  ggtitle("Correlation ", cor(x, y5))
```


## Interim summary

- Even when we *know* there are patterns/effects, conveying them accurately and effectively can be challenging

## @Franconeri2021-uv

- Reasoning about statistical properties is *hard*
- Describing relative changes or relative risk is *hard*
- Describing central tendencies of random processes is *hard*
- More vs. less informative ways of conveying same data
- Graphic experience/literacy varies [@Zikmund-Fisher2014-lg]]

---

![Figure 22 from @Franconeri2021-uv](../include/img/franconeri-fig-22.png){.lightbox}

## {.scrollable}

![Figure 24 from @Franconeri2021-uv](../include/img/franconeri-fig-24.png){.lightbox}

## {.scrollable}

![Figure 25 from @Franconeri2021-uv](../include/img/franconeri-fig-25.png){.lightbox}

## {.scrollable}

![Figure 26 from @Franconeri2021-uv](../include/img/franconeri-fig-26.png){.lightbox}

## {.scrollable}

![Figure 27 from @Franconeri2021-uv; @Zikmund-Fisher2014-lg](../include/img/franconeri-fig-27.png){.lightbox}
---

>Risk recall was significantly higher with more anthropomorphic icons (restroom icons, head outlines, and photos) than with other icon types, and participants rated restroom icons as most preferred. However, while restroom icons resulted in the highest correlations between perceived and actual risk among more numerate/graphically literate participants, they performed no better than other icon types among less numerate/graphically literate participants.

@Zikmund-Fisher2014-lg

## Who understands what?

:::: {.columns}
::: {.column width=50%}
![@Lindsey2024-ob](../include/img/ClimateDashboard-atmospheric-carbon-dioxide-image-paleo-20240405-1400px.png)
:::
::: {.column width=50%}
![@UnknownUnknown-ss](https://factsonclimate.org/assets/generated/concentration-warming-relationship_1920.png){fig-align="center"}
:::
::::

# Work session

## DataCamp

![DataCamp status as of 2025-02-26-1534](../include/img/datacamp-2025-02-26-1530.png)

## Check-ins

- Final Project proposal
- Exercise 04

# Next time

*More Slow-R*

# Resources

## References
