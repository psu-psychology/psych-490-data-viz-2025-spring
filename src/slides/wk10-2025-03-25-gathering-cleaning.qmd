---
title: "Gathering & cleaning data"
subtitle: "2025-03-25"
code-fold: false
---

# Prelude

## In the news...

![https://www.reddit.com/r/dataisbeautiful/comments/1jj2paj/oc_when_do_you_get_your_sunlight_visualising/](../include/img/daylight_NewYorkCity_2025.png)

---

![https://www.reddit.com/r/dataisbeautiful/comments/1jj2paj/oc_when_do_you_get_your_sunlight_visualising/](../include/img/daylight_Reykjavik_2025.png)

---

![https://www.reddit.com/r/dataisbeautiful/comments/1jj2paj/oc_when_do_you_get_your_sunlight_visualising/](../include/img/daylight_Singapore_2025.png)

## Monitoring the Future 

![@UnknownUnknown-av](../include/img/monitoring-the-future.png)

## Announcements

- [Penn State Open Scholarship Initiative](https://penn-state-open-science.github.io)

## Today's topics

- Data processing workflows
- Gathering data
- Cleaning data

## Data workflow

::: {.incremental}
- Collect
- Gather
- Clean
- Visualize/plot
- Analyze
:::

## Data workflow *we can script*

- ~~Collect~~
- Gather
- Clean
- Visualize/plot
- Analyze

## Data workflow *we can script*

- ~~Collect~~
- [**Gather**]{.green_assigned}
- [**Clean**]{.green_assigned}
- Visualize/plot
- Analyze

## Workflow in practice

- [Workshop Thursday, March 27](https://penn-state-open-science.github.io/data-mgmt-2025)

## Gather data

- How to acquire/download
  - Download manually
  - Download programmatically (via code)
- How to save
  - Text formats, e.g., comma-separated values (csv), best
  
## Download manually

- Visit forms.google.com

![](../include/img/google-forms-list.png)

## Download manually

- Pick a form

![](../include/img/google-forms-pick-a-form.png)

## Download manually

- Click on more options (...) menu

![](../include/img/google-forms-more-options.png)

## Download manually

![](../include/img/google-forms-download-csv.png)

## Download manually

- Go to default download location (varies by computer)
- Downloads as a zip (compressed) file

![](../include/img/google-forms-download-csv-zip.png)

## Download manually

- Open compressed file

![](../include/img/google-forms-view-unzipped-csv.png)

## Download manually

- Move file to target location

![](../include/img/google-forms-move-csv.png)

---

![Giphy.com](https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExODZhYng2N3JlaWVwYWVrN2R1czNrczV3NmN0NXhjM3EydngzcGk1dCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/26FxsQwgJyU4me9ig/giphy.gif)

## Download automatically

- Two manual steps
  - Create Google Sheets file: Click on "Link to Sheets"
  
![](../include/img/google-forms-more-options.png)

---

![](../include/img/google-forms-create-new-sheet.png)

## Download automatically

![](../include/img/google-forms-copy-sheet-name.png)

## Download automatically

- Log in to Google
- Download specific URL
- Save where I decide (`include/csv`) and with the name I choose (`PSYCH-490.003-Exercise-3.csv`)

---

```{r}
#| echo: true
#| 
# Authenticate using Google credentials stored
# Or, easier if you're not going to share publicly:
# options(gargle_oauth_email = "my_gmail_address@gmail.com")
options(gargle_oauth_email = Sys.getenv("GMAIL_SURVEY"))
googledrive::drive_auth()

googledrive::drive_download(
  "PSYCH 490.003 Exercise 3 (Responses)",
  path = file.path("../include/csv", "PSYCH-490.003-Exercise-3.csv"),
  type = "csv",
  overwrite = TRUE
)
message("Data downloaded")
```

## Download automatically

```{r}
#| echo: true
list.files(path = "../include/csv")
```

- The `list.files()` function lists files in a specific directory

## Import CSV

```{r}
#| echo: true
#| 
survey_manual <- readr::read_csv("../include/csv/PSYCH 490.003 Exercise 3.csv", show_col_types = FALSE)
dim(survey_manual)
```

- The `dim()` function describes the *dim*ensions of an R object.
- A data frame has two dimensions, rows and columns.

## Extract column names

```{r}
#| echo: true
names(survey_manual)
```

- The `names()` function returns the names of the columns in our data frame.

## Import (automatically-downloaded) CSV

Here we put all of this into the same block of code:

```{r}
#| echo: true
survey_auto <- readr::read_csv("../include/csv/PSYCH-490.003-Exercise-3.csv",
                               show_col_types = FALSE)
dim(survey_auto)
names(survey_auto)
```

## Clean then visualize or vice versa?

```{r}
#| echo: true
xtabs(formula = ~ `Favorite Icecream Flavor`, 
      data = survey_auto)
```

---

::: {.callout-important}
## Under the hood

- R prefers that variable names *not* have spaces
- When names have spaces, we have to communicate that to R
- So, we wrap `Favorite Icecream Flavor` in backticks ("`").
- the `xtabs()` function does cross-tabulations
:::

## Another cross-tabulation

```{r}
#| echo: true
xtabs(formula = ~ `Favorite Icecream Flavor` + `Best Pet Type`, 
      data = survey_auto)
```

## Clean then visualize

- Rename variable names: Shorter, remove spaces
- But capture the actual questions for later
  - Create a data dictionary

## Renaming column names

```{r}
#| echo: true
library(dplyr)
library(ggplot2)
survey_auto <- survey_auto |>
  rename(fav_flavor = "Favorite Icecream Flavor",
                best_pet = "Best Pet Type")
```

## Plotting one variable

```{r}
#| label: fig-favorite-icecream-flavor
#| fig-cap: "Favorite ice cream flavor among PSYCH 490.003 students"
#| echo: true
survey_auto |>
  count(fav_flavor) |>
  ggplot() +
  aes(x = fav_flavor, y = n, fill = fav_flavor) +
  geom_col()
```

## Plotting another variable

```{r}
#| label: fig-best-pet
#| fig-cap: "Best pet for PSYCH 490.003 students"
survey_auto |>
  count(best_pet) |>
  ggplot() +
  aes(x = best_pet, y = n, fill = best_pet) +
  geom_col()
```

## Why script?

- **Much** more reproducible (by others)
  - Especially for complex sequences of tasks
- **Much** more robust
- Be kind to your future (forgetful) self

---

:::: {.columns}
::: {.column width=50%}
![Hillel the Elder](https://upload.wikimedia.org/wikipedia/commons/c/c6/Hillel22.jpg){fig-width="10%"}
:::
::: {.column width=50%}
>If I am not for myself, who will be for me?

>And being for myself, what am I?

>And if not now, when?

@Wikipedia-contributors2025-rr
:::
::::

## How script?

- Save commands in a file (`*.R`)
- Save commands and comments in a Quarto file (`*.qmd`)
  - See the 'Learning-Quarto' assignment on posit.cloud

# Resources

## References
