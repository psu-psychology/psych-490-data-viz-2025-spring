---
title: "Making plots with `ggplot2`"
subtitle: "2025-03-27"
code-fold: false
---

# Prelude

## In the news...

![https://reddit.com/r/spaceporn](https://i.redd.it/69j9cmqvkzqe1.jpeg)

---

![https://reddit.com/r/dataisbeautiful](https://i.redd.it/46eflg15c2re1.png)

---

![https://reddit.com/r/dataisbeautiful](https://i.redd.it/nhx3yt31rhqe1.png)

## Announcements

- [Exercise 06](../exercises/ex06-figs-w-r.qmd) available
- On AI and academic work
  
---

{{< include _feynmann.qmd >}}

## Today's topics

- Data processing workflows
- Intro to `ggplot2`
- Introducing posit.cloud
- Work session

## Data workflow

::: {.incremental}
- Collect
- Gather
- Clean
- Visualize
- Analyze
:::

## Data workflow (more realistic)

```{mermaid}
flowchart TD
  A[Collect] --> B[Gather]
  B --> C[Clean]
  C --> B
  C --> D[Visualize]
  D --> C
  D --> E[Analyze]
  E --> C
```

## Targets

- A data frame
  - Rectangular
  - Tidy (rows are observations, columns are variables); @Hadley_Wickham2014-qj
  - Short, evocative variable names

## How script?

- Save commands in a file (`*.R`)
- Save commands and comments in a Quarto file (`*.qmd`)
  - See the 'Learning-Quarto' assignment on posit.cloud

## About `ggplot2`

- R package, @WickhamUnknown-kj
- Implements @Wilkinson2005-do "grammar of graphics"
- Add layers to plot
- Install in your RStudio environment via `install.packages("ggplot2")`

## Set-up

- Load package(s)

```{r}
#| echo: true
library(ggplot2)
```

## Acquire data

```{r}
#| echo: true
#| output-location: fragment
data_random_discrete <- data.frame(category = c('ab', 'xy', 'mn', 
                                                'qp', 'ea', 'f2',
                                                'gg', 'h*'),
                                   value = c(4.8, 5.5, 3.5, 
                                           4.6, 6.5, 6.6, 
                                           2.6, 3.0))

data_random_discrete
```

## Examine data

```{r}
#| echo: true
#| output-location: fragment
str(data_random_discrete)
```

## Step by step

```{r}
#| label: fig-blank-ggplot
#| fig-cap: "A 'bare bones' plot with data, but no aesthetics or graphics."
#| echo: true
#| output-location: fragment
p <- ggplot(data = data_random_discrete)
p
```

## Adding aesthetics

```{r}
#| label: fig-ggplot-w-aes
#| fig-cap: "A plot with aesthetics mapped to the X and Y axes but no other graphic elements."
#| echo: true
#| output-location: fragment

# Add aesthetics
p_aes <- p + 
  aes(x = category, y = value)
p_aes
```

## Adding a 'geom'

```{r}
#| label: fig-ggplot-data-aes-geom
#| fig-cap: "A complete plot with data, aesthetics, and a geom"
#| echo: true
#| output-location: fragment
p_col <- p_aes + 
  geom_col()
p_col
```

## Adding a fill color

```{.r code-line-numbers="1|2|4"}
p_colors <- p_col + 
  aes(fill = category)

p_colors
```

---

```{r}
#| label: fig-ggplot-ggplot-data-aes-geom-fill
#| fig-cap: "Adding an aesthetic based on 'category' to fill the bars with color."
#| output-location: slide
p_colors <- p_col + 
  aes(fill = category)
p_colors
```

## All at once

```{.r code-line-numbers="|1|2|3|4"}
data_random_discrete |>
  ggplot() +
  aes(x = category, y = value, fill = category) +
  geom_col()
```

---

```{r}
#| label: fig-complete-ggplot-figure
#| fig-cap: "The same figure generated from a short sequence of commands."
#| output-location: slide

data_random_discrete |>
  ggplot() +
  aes(x = category, y = value, fill = category) +
  geom_col()
```

## Why sequential?

```{.r code-line-numbers="|1|2|4"}
p_colors_flip <- p_colors + 
  coord_flip()

p_colors_flip
```

---

```{r}
#| label: fig-ggplot-data-aes-geom-fill-flipped
#| fig-cap: "Colored column with flipped axes"
#| output-location: slide
p_colors_flip <- p_colors + 
  coord_flip()

p_colors_flip
```

## versus...

```{.r code-line-numbers="|1|2|3|4|5"}
data_random_discrete |>
  ggplot() +
  aes(x = category, y = value, fill = category) +
  geom_col() +
  coord_flip()
```

---

```{r}
#| label: fig-complete-ggplot-figure-flipped
#| fig-cap: "Colored column with flipped axes"
#| output-location: slide
data_random_discrete |>
  ggplot() +
  aes(x = category, y = value, fill = category) +
  geom_col() +
  coord_flip()
```

## Change geom

```{.r code-line-numbers="|1|2|4"}
p_point <- p_aes + 
  geom_point()

p_point
```

---

```{r}
#| label: fig-ggplot-data-aes-geom-point
#| fig-cap: "Colored column with flipped axes"
#| output-location: slide
p_point <- p_aes + 
  geom_point()

p_point
```

## Style recommendation

```{.r code-line-numbers="1|2|3-4|5-6|7-8"}
data_frame |>
  # Manipulations to the data
  ggplot() +
  aes(x = , y = , fill = ) + # label aesthetic mappings
  # Add geom(s)
  geom_* +
  # Format legends, axes, add title, etc.
  ggtitle("My awesome figure")
```

## A personal story

![@Qian2022-yp](../include/img/qian-berenbaum-gilmore.png)

---

![Figure 1 from @Qian2022-yp](https://media.springernature.com/full/springer-static/image/art%3A10.1038%2Fs41598-022-22269-y/MediaObjects/41598_2022_22269_Fig1_HTML.png?as=webp)

## Script everything...

- You possibly can
- Re-use and recycle
- <https://github.com/gilmore-lab/sex-differences-project>

## "Stand on the shoulders of giants"

- @Wikipedia-contributors2024-qw

![giphy.com](https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExcmI2MTdlMzk2cjgwNWZyNzVoMGl4MDFmaXVjenBhb3Y2aHpmcjhkbiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/zuSibv0Ce6nW3tLTAG/giphy.gif)

## Introducing posit.cloud

![](../include/img/posit.cloud-screenshot.png)

# Resources

## References
