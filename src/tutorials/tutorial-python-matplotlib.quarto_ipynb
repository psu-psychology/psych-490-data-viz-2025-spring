{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Plotting in Python\"\n",
        "format: html\n",
        "---\n",
        "\n",
        "\n",
        "::: {.callout-note}\n",
        "Figures don't seem to be cross-referencing *across* documents.\n",
        "Let's see if they work *within* documents.\n",
        "\n",
        "Does the link to @fig-dual-histograms-matplotlib work?\n",
        "\n",
        "How about @fig-multiple-violin-plots?\n",
        "\n",
        "Apparently so.\n",
        "\n",
        "Okay, so do the ggplot2 figures work in this document?\n",
        "Specifically, does the reference to @fig-dual-boxplots-diff-ggplot2 work?\n",
        "\n",
        "No. So, the issue is cross-document figure references.\n",
        ":::\n",
        "\n",
        "\n",
        "## About {-}\n",
        "\n",
        "This page provides a very basic introduction to Python and the `matplotlib` plotting library.\n",
        "\n",
        "## Why Python? {-}\n",
        "\n",
        "Python is an awesome language for data science and data visualization.\n",
        "It is more popular than R, and it is widely used in scientific research and in industry.\n",
        "\n",
        "I find that it has a very readable syntax, meaning that it's relatively easy to see what well-written Python code is doing.\n",
        "\n",
        "## Setup {-}\n",
        "\n",
        "We start by importing the `numpy` and `pyplot` libraries and giving them convenient short names for future reference.\n"
      ],
      "id": "213a23cb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "id": "49a691cb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Plotting one variable {-}\n",
        "\n",
        "### Continuous {-}\n",
        "\n",
        "#### Histograms {-}\n",
        "\n",
        "From <https://matplotlib.org/stable/gallery/statistics/hist.html#sphx-glr-gallery-statistics-hist-py>\n",
        "\n",
        "Load components from `matplotlib`.\n"
      ],
      "id": "cd26b17b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from matplotlib import colors\n",
        "from matplotlib.ticker import PercentFormatter\n",
        "\n",
        "# Create a random number generator with a fixed seed for reproducibility\n",
        "rng = np.random.default_rng(19680801)"
      ],
      "id": "14ad3458",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Generate data and render it.\n"
      ],
      "id": "518b0c1a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-dual-histograms-matplotlib\n",
        "#| fig-cap: Two histograms with 100K points each.\n",
        "\n",
        "N_points = 100000\n",
        "n_bins = 20\n",
        "\n",
        "# Generate two normal distributions\n",
        "dist1 = rng.standard_normal(N_points)\n",
        "dist2 = 0.4 * rng.standard_normal(N_points) + 5\n",
        "\n",
        "fig, axs = plt.subplots(1, 2, sharey=True, tight_layout=True)\n",
        "\n",
        "# We can set the number of bins with the *bins* keyword argument.\n",
        "axs[0].hist(dist1, bins=n_bins)\n",
        "axs[1].hist(dist2, bins=n_bins)\n",
        "\n",
        "plt.show()"
      ],
      "id": "fig-dual-histograms-matplotlib",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Violin {-}\n",
        "\n",
        "Violin plots are another way to depict the distribution of a single continuous variable.\n",
        "\n",
        "The following code is copied verbatim from the following site:\n",
        "\n",
        "<https://matplotlib.org/stable/gallery/statistics/violinplot.html>\n"
      ],
      "id": "863a1e4a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-multiple-violin-plots\n",
        "#| fig-cap: Multiple violin plots with different parameters.\n",
        "\n",
        "# fake data\n",
        "fs = 10  # fontsize\n",
        "pos = [1, 2, 4, 5, 7, 8]\n",
        "data = [np.random.normal(0, std, size=100) for std in pos]\n",
        "\n",
        "# Create a plot with 2 rows and 6 columns\n",
        "fig, axs = plt.subplots(nrows=2, ncols=6, figsize=(10, 4))\n",
        "\n",
        "axs[0, 0].violinplot(data, pos, points=20, widths=0.3,\n",
        "                     showmeans=True, showextrema=True, showmedians=True)\n",
        "axs[0, 0].set_title('Custom violin 1', fontsize=fs)\n",
        "\n",
        "axs[0, 1].violinplot(data, pos, points=40, widths=0.5,\n",
        "                     showmeans=True, showextrema=True, showmedians=True,\n",
        "                     bw_method='silverman')\n",
        "axs[0, 1].set_title('Custom violin 2', fontsize=fs)\n",
        "\n",
        "axs[0, 2].violinplot(data, pos, points=60, widths=0.7, showmeans=True,\n",
        "                     showextrema=True, showmedians=True, bw_method=0.5)\n",
        "axs[0, 2].set_title('Custom violin 3', fontsize=fs)\n",
        "\n",
        "axs[0, 3].violinplot(data, pos, points=60, widths=0.7, showmeans=True,\n",
        "                     showextrema=True, showmedians=True, bw_method=0.5,\n",
        "                     quantiles=[[0.1], [], [], [0.175, 0.954], [0.75], [0.25]])\n",
        "axs[0, 3].set_title('Custom violin 4', fontsize=fs)\n",
        "\n",
        "axs[0, 4].violinplot(data[-1:], pos[-1:], points=60, widths=0.7,\n",
        "                     showmeans=True, showextrema=True, showmedians=True,\n",
        "                     quantiles=[0.05, 0.1, 0.8, 0.9], bw_method=0.5)\n",
        "axs[0, 4].set_title('Custom violin 5', fontsize=fs)\n",
        "\n",
        "axs[0, 5].violinplot(data[-1:], pos[-1:], points=60, widths=0.7,\n",
        "                     showmeans=True, showextrema=True, showmedians=True,\n",
        "                     quantiles=[0.05, 0.1, 0.8, 0.9], bw_method=0.5, side='low')\n",
        "\n",
        "axs[0, 5].violinplot(data[-1:], pos[-1:], points=60, widths=0.7,\n",
        "                     showmeans=True, showextrema=True, showmedians=True,\n",
        "                     quantiles=[0.05, 0.1, 0.8, 0.9], bw_method=0.5, side='high')\n",
        "axs[0, 5].set_title('Custom violin 6', fontsize=fs)\n",
        "\n",
        "axs[1, 0].violinplot(data, pos, points=80, vert=False, widths=0.7,\n",
        "                     showmeans=True, showextrema=True, showmedians=True)\n",
        "axs[1, 0].set_title('Custom violin 7', fontsize=fs)\n",
        "\n",
        "axs[1, 1].violinplot(data, pos, points=100, vert=False, widths=0.9,\n",
        "                     showmeans=True, showextrema=True, showmedians=True,\n",
        "                     bw_method='silverman')\n",
        "axs[1, 1].set_title('Custom violin 8', fontsize=fs)\n",
        "\n",
        "axs[1, 2].violinplot(data, pos, points=200, vert=False, widths=1.1,\n",
        "                     showmeans=True, showextrema=True, showmedians=True,\n",
        "                     bw_method=0.5)\n",
        "axs[1, 2].set_title('Custom violin 9', fontsize=fs)\n",
        "\n",
        "axs[1, 3].violinplot(data, pos, points=200, vert=False, widths=1.1,\n",
        "                     showmeans=True, showextrema=True, showmedians=True,\n",
        "                     quantiles=[[0.1], [], [], [0.175, 0.954], [0.75], [0.25]],\n",
        "                     bw_method=0.5)\n",
        "axs[1, 3].set_title('Custom violin 10', fontsize=fs)\n",
        "\n",
        "axs[1, 4].violinplot(data[-1:], pos[-1:], points=200, vert=False, widths=1.1,\n",
        "                     showmeans=True, showextrema=True, showmedians=True,\n",
        "                     quantiles=[0.05, 0.1, 0.8, 0.9], bw_method=0.5)\n",
        "axs[1, 4].set_title('Custom violin 11', fontsize=fs)\n",
        "\n",
        "axs[1, 5].violinplot(data[-1:], pos[-1:], points=200, vert=False, widths=1.1,\n",
        "                     showmeans=True, showextrema=True, showmedians=True,\n",
        "                     quantiles=[0.05, 0.1, 0.8, 0.9], bw_method=0.5, side='low')\n",
        "\n",
        "axs[1, 5].violinplot(data[-1:], pos[-1:], points=200, vert=False, widths=1.1,\n",
        "                     showmeans=True, showextrema=True, showmedians=True,\n",
        "                     quantiles=[0.05, 0.1, 0.8, 0.9], bw_method=0.5, side='high')\n",
        "axs[1, 5].set_title('Custom violin 12', fontsize=fs)\n",
        "\n",
        "\n",
        "for ax in axs.flat:\n",
        "    ax.set_yticklabels([])\n",
        "\n",
        "fig.suptitle(\"Violin Plotting Examples\")\n",
        "fig.subplots_adjust(hspace=0.4)\n",
        "plt.show()"
      ],
      "id": "fig-multiple-violin-plots",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Boxplot {-}\n",
        "\n",
        "From <https://matplotlib.org/stable/plot_types/stats/boxplot_plot.html#sphx-glr-plot-types-stats-boxplot-plot-py>.\n"
      ],
      "id": "96dc0390"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-boxplot-example\n",
        "#| fig-cap: Example of several boxplots with whiskers.\n",
        "\n",
        "plt.style.use('_mpl-gallery')\n",
        "\n",
        "# make data:\n",
        "np.random.seed(10)\n",
        "D = np.random.normal((3, 5, 4), (1.25, 1.00, 1.25), (100, 3))\n",
        "\n",
        "# plot\n",
        "fig, ax = plt.subplots()\n",
        "VP = ax.boxplot(D, positions=[2, 4, 6], widths=1.5, patch_artist=True,\n",
        "                showmeans=False, showfliers=False,\n",
        "                medianprops={\"color\": \"white\", \"linewidth\": 0.5},\n",
        "                boxprops={\"facecolor\": \"C0\", \"edgecolor\": \"white\",\n",
        "                          \"linewidth\": 0.5},\n",
        "                whiskerprops={\"color\": \"C0\", \"linewidth\": 1.5},\n",
        "                capprops={\"color\": \"C0\", \"linewidth\": 1.5})\n",
        "\n",
        "ax.set(xlim=(0, 8), xticks=np.arange(1, 8),\n",
        "       ylim=(0, 8), yticks=np.arange(1, 8))\n",
        "\n",
        "plt.show()"
      ],
      "id": "fig-boxplot-example",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Discrete/nominal {-}\n",
        "\n",
        "#### Bar chart {-}\n",
        "\n",
        "Source: <https://matplotlib.org/stable/plot_types/basic/bar.html#sphx-glr-plot-types-basic-bar-py>\n"
      ],
      "id": "e6881ee9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-bar-plot-example\n",
        "#| fig-cap: Example of a bar plot.\n",
        "\n",
        "plt.style.use('_mpl-gallery')\n",
        "\n",
        "# make data:\n",
        "x = 0.5 + np.arange(8)\n",
        "y = [4.8, 5.5, 3.5, 4.6, 6.5, 6.6, 2.6, 3.0]\n",
        "\n",
        "# plot\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "ax.bar(x, y, width=1, edgecolor=\"white\", linewidth=0.7)\n",
        "\n",
        "ax.set(xlim=(0, 8), xticks=np.arange(1, 8),\n",
        "       ylim=(0, 8), yticks=np.arange(1, 8))\n",
        "\n",
        "plt.show()"
      ],
      "id": "fig-bar-plot-example",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Plotting two variables {-}\n",
        "\n",
        "### Scatter plots {-}\n",
        "\n",
        "## Other kinds of plots {-}\n",
        "\n",
        "The following is copied verbatim from the Quarto website:\n",
        "\n",
        "<https://quarto.org/docs/get-started/hello/vscode.html>\n",
        "\n",
        "For a demonstration of a line plot on a polar axis, see @fig-polar.\n"
      ],
      "id": "fec7c963"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-polar\n",
        "#| fig-cap: A line plot on a polar axis\n",
        "\n",
        "r = np.arange(0, 2, 0.01)\n",
        "theta = 2 * np.pi * r\n",
        "fig, ax = plt.subplots(\n",
        "  subplot_kw = {'projection': 'polar'} \n",
        ")\n",
        "ax.plot(theta, r)\n",
        "ax.set_rticks([0.5, 1, 1.5, 2])\n",
        "ax.grid(True)\n",
        "plt.show()"
      ],
      "id": "fig-polar",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Library/Frameworks/Python.framework/Versions/3.13/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}